#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	uint index = gl_GlobalInvocationID.x;
	barrier(); // Wait till all threads reach this point
	Blade blade = blades[index];

    // TODO: Apply forces on every blade and update the vertices in the buffer

	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;
	float theta = blade.v0.w;
	float height = blade.v1.w;
	float stiffness = blade.up.w;

	// Gravity
	vec3 gE = vec3(0.0, -9.8, 0.0);
	vec3 f = normalize(cross(up, vec3(sin(theta), 0.0, cos(theta))));
	vec3 gF = 0.25 * 9.8 * f;
	vec3 gravity = gE + gF;

	// Recovery
	vec3 iv2 = v0 + height * up;
	vec3 recovery =  (iv2 - v2) * stiffness;

	// Wind
	vec3 wi = normalize(vec3(1.0, 0.0, 1.0));
	float s = cos((dot(vec3(v0.x, 0.0, v0.z), wi) + totalTime * 5.0));
	float fd = 1 -  abs(dot(normalize(wi * v0), normalize(v2 - v0)));
	float fr = dot((v2 - v0) , up) / height;	
	vec3 wind = wi * v0 * fd * fr * s; 

	// State Validation
	v2 += (gravity + recovery + wind) * deltaTime;
	v2 = v2 - up * min(dot(up, v2 - v0), 0.0);

	float lproj = length(v2 - v0 - up * dot( v2 - v1, up));
	v1 = v0 + height * up * max(1 - (lproj / height), 0.05 * max(lproj / height, 1));

	float L0 = length(v2 - v0);
	float L1 = length(v2 - v1) + length(v1 - v0);
	float L = (2.0 * L0 + (3.0 - 1.0) * L1) / (3.0 + 1.0);
	float r = height / L;

	blade.v1.xyz = v0 + r * (v1 - v0);
	blade.v2.xyz = v1 + r * (v2 - v1);
	blades[index] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	bool culled = false;

	//Orientation test
	mat4 inverseView = inverse(camera.view);
	vec3 viewDir = (inverseView * vec4(0.0,0.0,1.0,0.0)).xyz;
	if(abs(dot(f,viewDir)) > 0.9) {
		culled = true;
	}

	//View-frustum test
	if(!culled) {
		vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
		mat4 viewproj = camera.proj * camera.view;
		vec4 pv0 = viewproj * vec4(v0, 1.0);
		vec4 pm = viewproj * vec4(m, 1.0);
		vec4 pv2 = viewproj * vec4(v2, 1.0);
		float t = 0.3;
		float hv0 = pv0.w + t;
		float hm = pm.w + t;
		float hv2 = pv2.w + t;
		if(!(inBounds(pv0.x, hv0) && inBounds(pv0.y, hv0) && inBounds(pv0.z, hv0)
		&& inBounds(pm.x, hm) && inBounds(pm.y, hm) && inBounds(pm.z, hm)
		&& inBounds(pv2.x, hv2) && inBounds(pv2.y, hv2) && inBounds(pv2.z, hv2))) {
			culled = true;
		}
	}

	//Distance test
	if(!culled) {
		vec3 v0_c = (camera.view * vec4(v0, 1.0)).xyz;
		vec3 upc = normalize((camera.view * vec4(up, 0.0)).xyz);
		float dproj = length(v0_c - dot(v0_c , upc) * upc);
		float dmax = 45.0;
		uint n = 10;
		if((index % n) > n * (1.0 - dproj / dmax)) {
			culled = true;
		}
	}

	if(!culled)
	{
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
	}
}
