#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer InputBlades {
	Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// 1. Store the input blades

// 2. Write out the culled blades

// 3. Write the total number of blades remaining

 layout(set = 2, binding = 2) buffer NumBlades { 	  
	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	float time = deltaTime + totalTime;

    // TODO: Apply forces on every blade and update the vertices in the buffer

	uint index = gl_GlobalInvocationID.x;

	Blade blade = inputBlades[index];

	vec4 v0 = blade.v0;
	vec4 v1 = blade.v1;
	vec4 v2 = blade.v2;
	vec4 v3 = blade.up;

	vec3 orientation = vec3(cos(v0.w), 0.0, sin(v0.w));

	//recovery force
	vec3 recovery = (vec3(v0) + v1.w * vec3(v3)) - vec3(v2);
	recovery *= v3.w; // multiply by stiffness coefficient

	//gravity
	vec3 envGravity = 1.0 * (-vec3(v3) * 9.8);
	vec3 frontGravity = .25 * length(envGravity) * vec3(0.0, 0.0, 1.0);
	vec3 gravity = envGravity + frontGravity;

	//wind
	vec3 windForce = sin(totalTime) * vec3(0.0, 0.0, 10.0);
	float directionAlignment = 1.0 - abs(dot(normalize(windForce), normalize(orientation)));
	float heightRatio = dot(vec3(v2) - vec3(v0), vec3(v3)) / v1.w;
	float alignmentValue = directionAlignment * heightRatio;
	vec3 wind = alignmentValue * windForce;

	vec3 translation = (recovery + gravity + wind) * deltaTime; 

	inputBlades[index].v2 += vec4(translation, 0.0);
	culledBlades[index] = inputBlades[index];

	atomicAdd(numBlades.vertexCount, 1);

	//culledBlades.data[index] = inBlades.data[index];

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
