#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like


// input
layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

// output
layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
   	uint vertexCount;   // Write the number of blades remaining here
   	uint instanceCount; // = 1
   	uint firstVertex;   // = 0
   	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	Blade blade = blades[index];

	// blade parameters
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;
	float angle = blade.v0.w;
	float h = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.v2.w;
	vec3 f = normalize(cross(up, vec3(cos(angle), 0.0, sin(angle))));

	// natural forces
	// 1. gravity
	vec3 gE = vec3(0.0, -9.8, 0.0);
	vec3 gF = 0.25 * length(gE) * f;
	vec3 gravity = gE + gF;
	
	// 2. recovery
	vec3 recovery = (v0 + h * v1 - v2) * stiffness;

	// 3. wind
	vec3 wi = vec3(1.0, 0.0, -1.0);
	float fd = 1.0 - abs(dot(normalize(wi), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / h;
	float theta = fd * fr;
	vec3 wind = wi * theta;

	vec3 vdt = (gravity + recovery + wind) * deltaTime;
	vec3 new_v2 = v2 + vdt;

	// state validation
	// 1. v2 above local plane
	v2 = v2 - up * min(dot(up, v2 - v0), 0.0);

	// 2. always has slight curvature
	float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + h * up * max(1.0 - lproj / h, 0.05 * max(lproj / h, 1.0));

	// 3. length of Bezier not larger than blade height
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	float n = 2.0;
	float L = (2.0 * L0 + (n - 1.0) * L1) / (n + 1.0);
	float r = h / L;
	v1 = v0 + r * (v1 - v0);
	v2 = v1 + r * (v2 - v1);

	blade.v1.xyz = v1;
	blade.v2.xyz = v2;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	// 1. orientation culling
	mat4 invView = inverse(camera.view);
	vec3 view_WS = (invView * vec4(0.0, 0.0, 1.0, 0.0)).xyz;
	bool culled_orient = abs(dot(view_WS, f)) > 0.9;

	// 2. view-frustum culling
	float tolerance = 3.0;
	float homo;
	bool culled_frustum = false;

	vec4 v0_NDC = camera.proj * camera.view * vec4(v0, 1.0);
	homo = v0_NDC.w;
	culled_frustum = !inBounds(v0_NDC.x, homo + tolerance) || !inBounds(v0_NDC.y, homo + tolerance);
	
	if (!culled_frustum) {
		vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
		vec4 m_NDC = camera.proj * camera.view * vec4(m, 1.0);
		homo = m_NDC.w;
		culled_frustum = !inBounds(m_NDC.x, homo + tolerance) || !inBounds(m_NDC.y, homo + tolerance);
	}
	
	if (!culled_frustum) {
		vec4 v2_NDC = camera.proj * camera.view * vec4(v1, 1.0);
		homo = v2_NDC.w;
		culled_frustum = !inBounds(v2_NDC.x, homo + tolerance) || !inBounds(v2_NDC.y, homo + tolerance);
	}
	
	// 3. distance culling
	vec3 c = (invView * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	float dproj = length(v0 - c - up * dot(up, v0 - c));
	float dmax = 100.0;
	float num_buckets = 10.0;
	bool culled_distance = mod(index, num_buckets) < floor(num_buckets * (1.0 - dproj/dmax));

	if (!culled_orient && !culled_frustum && !culled_distance) {
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
	}
}
