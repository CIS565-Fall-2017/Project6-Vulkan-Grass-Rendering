#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GFORCE 9.8
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
 	 Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
 	Blade culledBlades[];
};
layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 Interpolation(vec3 posV0, vec3 V1_Position, vec3 posV2, float v)
{
	vec3 a = posV0 + v*(V1_Position -  posV0);
	vec3 b = V1_Position + v*(posV2 - V1_Position);
	return a + v*(b - a);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point
    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	vec3 V0_Position = blades[index].v0.xyz;
	vec3 V1_Position = blades[index].v1.xyz;
	vec3 V2_Position = blades[index].v2.xyz;
	vec3 Blades_UP = blades[index].up.xyz;
	//Data de-compression
	float theta = blades[index].v0.w;
	float h = blades[index].v1.w;
	float sinTheta = sin(theta);
	float cosTheta = cos(theta);
	vec3 faceDir = normalize(cross(Blades_UP, vec3(sinTheta, 0, cosTheta)));

	//Gravity
	vec4 gravityDirection = vec4(0, -1, 0, GFORCE);
	vec3 g_overall = normalize(gravityDirection.xyz) * GFORCE;
	vec3 g_blades = faceDir * 0.25 * length(g_overall);
	vec3 G_TotalForce = g_overall + g_blades;

	//Recovery
	vec3 iv2 = V0_Position + Blades_UP * h;
	float maxCap = 1.8;
	vec3 recoveryForce = (iv2 - V2_Position) * blades[index].up.w * maxCap/ min(h, maxCap);

	//Wind
	vec3 windDirection = normalize(vec3(cos(totalTime * V0_Position.x), cos(totalTime), sin(totalTime * V0_Position.z))); // straight wave
	float windSpeed = 10.0 * (float(int(totalTime) % 100) / 50.0);
	float directionInfluence = 1.0 -  abs(dot(windDirection ,normalize(V2_Position - V0_Position)));
	float heightratio = dot(V2_Position - V0_Position, Blades_UP) / h;
	float windStrength = 15.0;
	vec3 windForce = windDirection * directionInfluence * heightratio * windStrength;
	

	//Total force	
	vec3 tv2 = (G_TotalForce + recoveryForce + windForce) * deltaTime;
	vec3 v2 = V2_Position + tv2;
	
	//a position of v2 above the local plane can be ensured
	v2 = v2 - Blades_UP*min(dot(Blades_UP, v2 - V0_Position), 0.0);


	float lproj = length(v2 - V0_Position - Blades_UP * dot(v2 - V0_Position, Blades_UP));
	float lprohOverh = lproj / h;
	vec3 v1 = V0_Position + Blades_UP* h * max(1.0 - lprohOverh , 0.05*max(lprohOverh,  1.0));

	
	float degree = 3.0;
	float L0 = distance(v2,V0_Position);
	float L1 = distance(v2,v1) + distance(v1,V0_Position);
	float L = (2.0*L0 + (degree - 1.0)*L1) / (degree + 1.0);
	float r = h / L;

	
    blades[index].v1.xyz = V0_Position + r*(v1 - V0_Position);
	blades[index].v2.xyz = blades[index].v1.xyz + r*(v2 - v1);
    blades[index] = blades[index];


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	
	V0_Position = blades[index].v0.xyz;
	V1_Position = blades[index].v1.xyz;
	V2_Position = blades[index].v2.xyz;

	mat4 invView = inverse(camera.view);
	vec3 viewVectorWorld = (invView * vec4(0,0,1,0)).xyz;
	//Reminder:
	//If any flag is true, it means that he passes the test.
	//Orientation culling
	float tresholdOrientCull = 0.1;
	bool culledByOrientation = abs(dot(faceDir, normalize(vec3(viewVectorWorld.x, 0.0, viewVectorWorld.z)))) >= tresholdOrientCull;	

	//View-frustum culling
	bool culledByFrustum = true;
	vec4 ScreenV0= camera.proj * camera.view * vec4(V0_Position, 1.0);
	vec4 ScreenV2= camera.proj * camera.view * vec4(V2_Position, 1.0);
	ScreenV0 /= ScreenV0.w;
	ScreenV2 /= ScreenV2.w;	
	vec3 center025Pos = Interpolation(V0_Position, V1_Position, V2_Position, 0.25);	
	vec3 centerPos =   0.25*V0_Position * 0.5*V1_Position * 0.25*V2_Position;
	vec3 center075Pos = Interpolation(V0_Position, V1_Position, V2_Position, 0.75);	
	vec4 projCenter025Pos= camera.proj * camera.view * vec4(center025Pos, 1.0);
	projCenter025Pos /= projCenter025Pos.w;
	vec4 projCenterPos= camera.proj * camera.view * vec4(centerPos, 1.0);
	projCenterPos /= projCenterPos.w;
	vec4 projCenter075Pos= camera.proj * camera.view * vec4(center075Pos, 1.0);
	projCenter075Pos /= projCenter075Pos.w;

	float clipVal = 1.3;

	if( (ScreenV0.x >= -clipVal && ScreenV0.x <= clipVal) &&  (ScreenV0.y >= -clipVal && ScreenV0.y <= clipVal)  && (ScreenV0.z >= 0.0 && ScreenV0.z <= 1.0) ||
	    (ScreenV2.x >= -clipVal && ScreenV2.x <= clipVal) &&  (ScreenV2.y >= -clipVal && ScreenV2.y <= clipVal)  && (ScreenV2.z >= 0.0 && ScreenV2.z <= 1.0) ||
		(projCenter025Pos.x >= -clipVal && projCenter025Pos.x <= clipVal) &&  (projCenter025Pos.y >= -clipVal && projCenter025Pos.y <= clipVal)  && (projCenter025Pos.z >= 0.0 && projCenter025Pos.z <= 1.0) ||
		(projCenterPos.x >= -clipVal && projCenterPos.x <= clipVal) &&  (projCenterPos.y >= -clipVal && projCenterPos.y <= clipVal)  && (projCenterPos.z >= 0.0 && projCenterPos.z <= 1.0) ||
		(projCenter075Pos.x >= -clipVal && projCenter075Pos.x <= clipVal) &&  (projCenter075Pos.y >= -clipVal && projCenter075Pos.y <= clipVal)  && (projCenter075Pos.z >= 0.0 && projCenter075Pos.z <= 1.0)
	
	)
		culledByFrustum = true;
	else 
		culledByFrustum = false;


	//Distance culling
	float near_clip = 0.1;
	float far_clip = 100.0;
	
	bool culledByDistance = false;
	float linearDepth =  (2.0 * near_clip) / (far_clip + near_clip - ScreenV0.z * (far_clip - near_clip));

	float tresholdDistCull = 0.95;

	if(linearDepth <= tresholdDistCull)
	{
		culledByDistance = true;
	}
	culledByDistance = true;
	if((culledByOrientation && culledByFrustum && culledByDistance))	
	{
		culledBlades[atomicAdd(numBlades.vertexCount , 1)] = blades[index];
	}	
}
 