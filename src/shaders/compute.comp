#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define GRAVITY 9.8

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call

// Store the input blades
layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

//  Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// Write the total number of blades remaining
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	Blade blade = blades[index];

	vec3 pos_v0 = blade.v0.xyz;
	vec3 pos_v1 = blade.v1.xyz;
	vec3 pos_v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;
	float theta = blade.v0.w;
	float h = blade.v1.w;
	float w = blade.v2.w;
	float stiffness = blade.up.w;

	// Gravity
	vec3 orientation = vec3(sin(theta), 0, cos(theta));
	vec3 faceDir = normalize(cross(up, orientation));

	// D.xyz = direction
	// D.w = magnitude of acceleration
	vec4 D = vec4(0, -1, 0, GRAVITY);
	vec3 gE = normalize(D.xyz) * D.w; // Environmental gravity
	vec3 gF = (0.25) * length(gE) * faceDir; // Front gravity
	vec3 gravityForce = gE + gF;

	// Recovery
	vec3 iv2 = pos_v0 + up * h;
	vec3 recoveryForce = (iv2 - pos_v2) * stiffness;

	// Wind
	vec3 windDirection = normalize(vec3(1, 0, 0));
	float windStrength = 3.0 * cos(totalTime);
	float fr = dot(pos_v2 - pos_v0, up) / h;
	float fd = 1.0 -  abs(dot(windDirection, normalize(pos_v2 - pos_v0)));
	vec3 windForce = windStrength * windDirection * fr * fd;
	
	// Total force
	vec3 tv2 = (gravityForce + recoveryForce + windForce) * deltaTime;

	// Position of v2
	vec3 v2 = pos_v2 + tv2;
	v2 = v2 - up * min(dot(up, v2 - pos_v0), 0.0);

	// Length from v0 to v2
	float l_proj = length(v2 - pos_v0 - up * dot(v2 - pos_v0, up));
	
	// Position of v1
	float ratio = l_proj / h;
	vec3 v1 = pos_v0 + up * h * max(1.0 - ratio, 0.05 * max(ratio, 1.0));
	
	// Corrected position
	float n = 3.0;
	float L0 = distance(v2, pos_v0);
	float L1 = distance(v2, v1) + distance(v1, pos_v0);
	float L = (2.0 * L0 + (n - 1.0) * L1) / (n + 1.0);
	ratio = h / L;
	vec3 corr_v1 = pos_v0 + ratio * (v1 - pos_v0);
	vec3 corr_v2 = corr_v1 + ratio * (v2 - v1);

	blade.v1.xyz = corr_v1;
	blade.v2.xyz = corr_v2;
	blades[index] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	
	pos_v0 = blade.v0.xyz;
	pos_v1 = blade.v1.xyz;
	pos_v2 = blade.v2.xyz;

	// Orientation test
	mat4 inverseView = inverse(camera.view);
	vec3 worldView = (inverseView * vec4(0, 0, 1, 0)).xyz;
	vec3 dir_c = normalize(vec3(worldView.x, 0.0, worldView.z));
	vec3 dir_b = faceDir;
	float threshold = 0.9;
	bool orientationTest = threshold > (abs(dot(dir_b, dir_c)));

	//View-frustum culling
	vec4 proj_v0 = camera.proj * camera.view * vec4(pos_v0, 1.0);
	proj_v0 /= proj_v0.w;
	
	vec4 proj_v2 = camera.proj * camera.view * vec4(pos_v2, 1.0);
	proj_v2 /= proj_v2.w;

	vec3 m = 0.25 * pos_v0 + 0.5 * pos_v1 + 0.25 * pos_v2;
	vec4 proj_m = camera.proj * camera.view * vec4(m, 1.0);
	proj_m /= proj_m.w;

	float tolerance  = 1.0;
	bool frustrumTest = true;
	if( (proj_v0.x >= -tolerance  && proj_v0.x <= tolerance ) &&  (proj_v0.y >= -tolerance  && proj_v0.y <= tolerance )  && (proj_v0.z >= 0.0 && proj_v0.z <= 1.0) ||
	    (proj_v2.x >= -tolerance  && proj_v2.x <= tolerance ) &&  (proj_v2.y >= -tolerance  && proj_v2.y <= tolerance )  && (proj_v2.z >= 0.0 && proj_v2.z <= 1.0) ||
		(proj_m.x >= -tolerance && proj_m.x <= tolerance) &&  (proj_m.y >= -tolerance && proj_m.y <= tolerance)  && (proj_m.z >= 0.0 && proj_m.z <= 1.0)) {
		frustrumTest = false;
	}

	// Distance test
	float near = 0.1;
	float far = 100.0;
	float depth =  (2.0 * near) / (far + near - proj_v0.z * (far - near));

	bool distanceTest = true;
	if(threshold > depth) {
		distanceTest = false;
	}

	// Add blade if passes all tests
	if(!(orientationTest || frustrumTest || distanceTest))
	{
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
	}
}