#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Write the total number of blades remaining
// 2. Store the input blades
// 3. Write out the culled blades
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 0) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

// The original blades, unculled
layout(set = 2, binding = 1) buffer Blades {
 	 Blade blades[];
};

// The culled blades
layout(set = 2, binding = 2) buffer CulledBlades {
 	Blade culledBlades[];
};

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
	// Reset the number of blades to 0
	uint idx = gl_GlobalInvocationID.x;
	if (idx== 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	Blade blade = blades[idx];

	vec3 up = blade.up.xyz;
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	float orientation = blade.v0.w;
	float height      = blade.v1.w;
	float width       = blade.v2.w;
	float stiffness   = blade.up.w;
	mat4 VP = camera.proj * camera.view;

	// Blade Face direction:
	// i.e. Which way is forward
	// How to find face direction for dummies:
	// http://www.dummies.com/education/science/physics/how-to-find-a-vectors-magnitude-and-direction/
	vec3 dir = normalize(cross(up, vec3(sin(orientation), 0, cos(orientation))));

	// Force 1: Gravity
	// Direction (.xyz) -- Magnitutde (.w)
    vec4 D = vec4(0, -1, 0, 9.81);
    
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 gF = dir * 0.25 * length(gE);
    vec3 gravity = gE + gF;


	//Force 2: Recovery
	vec3 iv2 = v0 + up * height;
	vec3 recovery = (iv2 - v2) * stiffness;

	//Force 3: Wind
	vec3 w_d = vec3(1);
	vec3 wi = w_d * (sin(v0.x+totalTime) + sin(v0.y+totalTime));
	
	vec3 fd =  1 - abs( normalize(wi) - normalize(v2 - v0) );
    float fr =  dot(v2 - v0, up) / height;
    
    vec3 wind = wi * fd * fr;


	// Apply Forces:
	// v2 = old v2 + delta_v2
	vec3 dv2 = (gravity + recovery + wind) * deltaTime;
    v2 = v2 + dv2;

	// From 5.2: State Validation:
	// -- Check if above the ground
	v2 = v2 - up * min(dot(up, v2 - v0), 0.0);

	// Check Length
	float l_proj = length(v2 - v0 - up * (dot(v2-v0, up)));

	v1 = v0 + height * up * max (1 - (l_proj/ height), 0.05 * max (l_proj/height, 1));

	float n = 4.0; // Bezier Curve Degree
	float l_0 = distance(v2, v0);
	float l_1 = distance(v2, v1) + distance(v1, v0);
	float L = (   (2.0 * l_0) + ((n - 1.0) * l_1)  )
	                     / (n + 1.0);
	float r = height / L;

	blade.v1.xyz = v0      + r * (v1 - v0);
	blade.v2.xyz = blade.v1.xyz + r * (v2 - v1);
	blades[idx]  = blade;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	
	// Culling Heurstic 1: Orientation culling
    vec3 viewDirection = (inverse(camera.view) * vec4(0,0,-1,0)).xyz;
	//Avoid vertical culling (if the camera is looking straight down)
	viewDirection = normalize(vec3(viewDirection.x, 0, viewDirection.z));
	bool cullOrientation = 0.4 > abs(dot(viewDirection, normalize(dir)));


	//Culling Heuristic 2: View-Frustrum Culling
	vec3 m = (v0/4) * (v1/2) * (v2/4);

	//Side Tolerance
	float tolerance = 0.05;

	vec4  v0_proj =  VP * vec4(v0, 1);	float v0_h    =  v0_proj.w + tolerance;	bool  v0_in   = (-v0_h <= v0_proj.x) && (v0_proj.x <= v0_h) &&	                (-v0_h <= v0_proj.y) && (v0_proj.y <= v0_h) &&				    (-v0_h <= v0_proj.z) && (v0_proj.z <= v0_h);	vec4  m_proj  =  VP * vec4( m,1);	float m_h     =  m_proj.w + tolerance;	bool  m_in    = (-m_h <= m_proj.x) && (m_proj.x <= m_h) &&	                (-m_h <= m_proj.y) && (m_proj.y <= m_h) &&				    (-m_h <= m_proj.z) && (m_proj.z <= m_h);		vec4  v2_proj =  VP * vec4(v2,1);	float v2_h    =  v2_proj.w + tolerance;	bool  v2_in   = (-v2_h <= v2_proj.x) && (v2_proj.x <= v2_h) &&	                (-v2_h <= v2_proj.y) && (v2_proj.y <= v2_h) &&				    (-v2_h <= v2_proj.z) && (v2_proj.z <= v2_h);	bool cullViewFrustrum = (!v0_in) || (!m_in) || (!v2_in);

	//Culling Heuristic 3: Distance Culling
	bool cullDistance = false;
	float dist = v0_proj.z/v0_proj.w;
	if (dist > 0.992) {
		// Random float number 0--1
		float random = rand(v0.xy);

		// Bucket Threshold
		float bucketThreshold = (1 - dist)*25;
	    cullDistance = random > bucketThreshold;
	}
	// Cull completely if less than 0.999
	if (dist > 0.999) {
	   cullDistance = true;
	}


	if (/*!cullOrientation && !cullViewFrustrum && */ !cullDistance) {
	   culledBlades[atomicAdd(numBlades.vertexCount , 1)] = blades[idx];
	}
}
