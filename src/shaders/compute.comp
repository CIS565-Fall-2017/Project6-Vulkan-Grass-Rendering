#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer InputBlades {
	Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

 layout(set = 2, binding = 2) buffer NumBlades { 	  
	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point
	float time = deltaTime + totalTime;
	uint index = gl_GlobalInvocationID.x;

	Blade blade = inputBlades[index];

	vec4 v0 = blade.v0;
	vec4 v1 = blade.v1;
	vec4 v2 = blade.v2;
	vec4 up = blade.up;

	vec3 bladeNormal = vec3(sin(v0.w), 0.0, cos(v0.w));

	//recovery force
	vec3 recovery = (v0.xyz + v1.w * up.xyz) - v2.xyz;
	recovery *= up.w; // multiply by stiffness coefficient

	//gravity
	vec3 envGravity = 1.0 * (-up.xyz * 9.8);
	vec3 frontGravity = .25 * length(envGravity) * bladeNormal;
	vec3 gravity = envGravity + frontGravity;

	//wind
	//vec3 windForce = sin(totalTime * 4.0 + abs(cos(v0.x) - cos(v0.z))) * vec3(3.0, 0.0, -3.0);
	vec3 windCenter = 0.5 * vec3(sin(totalTime), 0.0, cos(totalTime));
	vec3 windForce = (-sin(totalTime * 20.0 - length(v0.xyz - windCenter)) + 0.8) * normalize(v0.xyz - windCenter) * 100.0;
	float directionAlignment = abs(dot(normalize(windForce), normalize(bladeNormal)));
	float heightRatio = dot(v2.xyz - v0.xyz, up.xyz) / v1.w;
	float alignmentValue = directionAlignment * heightRatio;
	vec3 wind = alignmentValue * windForce;

	//total the forces
	vec3 translation = (recovery + gravity + wind) * deltaTime; 

	//do initial translation on control point
	v2 += vec4(translation, 0.0);

	//state validation
	v2.xyz = v2.xyz - up.xyz * min(dot(up.xyz, v2.xyz - v0.xyz), 0);

	float lProj = length(v2.xyz - v0.xyz - up.xyz * dot(v2.xyz - v0.xyz, up.xyz));
	v1.xyz = v0.xyz + v1.w * up.xyz * max(1.0 - lProj / v1.w, 0.05 * max(lProj / v1.w, 1.0));

	float L0 = distance(v0.xyz, v2.xyz);
	float L1 = distance(v0.xyz, v1.xyz) + distance(v1.xyz, v2.xyz);
	float L = (2.0 * L0 + 2.0 * L1) / 4.0;
	float r = v1.w / L;
	vec3 v1Tmp = v1.xyz;
	v1.xyz = v0.xyz + r * (v1.xyz - v0.xyz);
	v2.xyz = v1.xyz + r * (v2.xyz - v1Tmp);

	//update Blades
	inputBlades[index].v1 = v1;
	inputBlades[index].v2 = v2;
	
	culledBlades[index] = inputBlades[index];

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer

	vec4 clipTest = camera.proj * camera.view * vec4(v0.xyz, 1.0);
	clipTest /= clipTest.w;

	float normalTest = dot(normalize(vec3(camera.view * vec4(v0.xyz, 1.0))), normalize(vec3(camera.view * vec4(bladeNormal, 0.0))));

	if (clipTest.x > -1.1 && clipTest.x < 1.1 && clipTest.y > -1.1 && clipTest.y < 1.1 && abs(normalTest) > 0.05) {
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades[index];
	}

	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	//culledBlades.data[index] = inBlades.data[index];

	
}
