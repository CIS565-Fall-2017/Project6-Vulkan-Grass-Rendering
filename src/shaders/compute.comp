#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Constants 
const float ACCELERATION = 5;
const vec4 GRAVITY = vec4(0.0, -1.0, 0.0, ACCELERATION);

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;



layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
} blades;

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;



bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		// numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point


	uint index = gl_GlobalInvocationID.x;
	const int numBlades = numBlades.vertexCount;

    // TODO: Apply forces on every blade and update the vertices in the buffer
	for(int i = 0; i < numBlades; i++)
	{
		// ---------- Calculate gravity ---------- g = gE + gF
		
		// Environmental gravity
		vec3 gE = normalize(vec3(GRAVITY.xyz)) * GRAVITY.w;
		
		// Front gravity (blade's v0.w = direction)
		vec3 gF = 0.25 * length(gE) * blades[i].v0.w;

		vec3 g = gE + gF;

		// ---------- Calculate recovery ---------- r = (iv2 - v2) * stiffness
		// blades v1.w = height and up.w = stiffness
		vec3 iv2 =  vec3(blades[i].up * blades[i].v1.w);		//NOT SURE IF THIS IS RIGHT?????????????????????????????????
		vec3 r = (iv2 - vec3(blades[i].v2.xyz)) * blades[i].up.w;

		// ---------- Calculate wind ----------
		vec3 windDir = vec3(1.0);
		vec3 windAlign = vec3(1.0);
		vec3 w = windDir + windAlign;

		// ---------- Calculate total force ----------
		// MAKE SURE TO DO STATE VALIDATION HERE
		vec3 tv2 = (g + r + w) * Time.deltaTime;

	}//end for all grass blades 


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
